/*
    __
    /L       
    - This module was generated by Claude Sonnet 4
    - Upgraded it to use it as base unite for higher bit adder
    - A 4-bit carry look ahead adder
*/

module cla_4bit (
    input [3:0] a,
    input [3:0] b,
    input cin,
    output [3:0] sum,
    output p_pro,g_pro // Propogate the signal for higher adder
);

// Generate and propagate signals
wire [3:0] g, p;
wire [3:1] c;  // Only need c[1], c[2], c[3] - c[0] is just cin

// Generate (G) and Propagate (P) for each bit
assign g[0] = a[0] & b[0];
assign g[1] = a[1] & b[1];
assign g[2] = a[2] & b[2];
assign g[3] = a[3] & b[3];

assign p[0] = a[0] ^ b[0];
assign p[1] = a[1] ^ b[1];
assign p[2] = a[2] ^ b[2];
assign p[3] = a[3] ^ b[3];

// Carry lookahead logic
assign c[1] = g[0] | (p[0] & cin);
assign c[2] = g[1] | (p[1] & g[0]) | (p[1] & p[0] & cin);
assign c[3] = g[2] | (p[2] & g[1]) | (p[2] & p[1] & g[0]) | (p[2] & p[1] & p[0] & cin);

// Generate and Propogate to the block input
assign g_pro = g[3] | (p[3] & g[2]) | (p[3] & p[2] & g[1]) | (p[3] & p[2] & p[1] & g[0]);
assign p_pro = p[0] & p[1] & p[2] & p[3];
// Sum calculation
assign sum[0] = p[0] ^ cin;
assign sum[1] = p[1] ^ c[1];
assign sum[2] = p[2] ^ c[2];
assign sum[3] = p[3] ^ c[3];

endmodule

/*
    - Tested output for normal 4 bit adder without the upgrade:- 
        A,      B,      C_in,   Sum,    Cout
        0000,   0000,   0,      0000,   0
        0001,   0001,   0,      0010,   0
        1111,   0001,   0,      0000,   1
        1111,   1111,   0,      1110,   1
        1111,   1111,   1,      1111,   1
        1010,   0101,   0,      1111,   0
*/